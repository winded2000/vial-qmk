/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT  0
#define NUM_MODS 1
#define SHRTCUT  2
#define BT_CTRL  3

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    macros {
        ZMK_MACRO(xl_paste,
            wait-ms = <50>;
            tap-ms = <50>;
            bindings = <&kp LA(LC(V)) &kp V &kp ENTER>;
        )
        ZMK_MACRO(win_sd,
            wait-ms = <50>;
            tap-ms = <50>;
            bindings =
                <&kp LG(X)>,
                <&macro_wait_time 200>,
                <&kp U>,
                <&macro_wait_time 200>,
                <&kp U>,
                <&macro_wait_time 200>,
                <&kp U>;
        )
        ZMK_MACRO(win_rst,
            wait-ms = <50>;
            tap-ms = <50>;
            bindings = <&kp LG(X)>;
        )
        ZMK_MACRO(new_sent,
            wait-ms = <50>;
            tap-ms = <50>;
            bindings = <&kp DOT &kp SPACE &sk LEFT_SHIFT>;
        )
        ZMK_MACRO(sym_deg,
            wait-ms = <50>;
            tap-ms = <50>;
            bindings = <&macro_press   &kp LALT>
                     , <&macro_tap     &kp KP_N2 &kp KP_N4 &kp KP_N8>
                     , <&macro_release &kp LALT>;
        )
        ZMK_MACRO(sym_pm,
            wait-ms = <50>;
            tap-ms = <50>;
            bindings = <&macro_press   &kp LALT>
                     , <&macro_tap     &kp KP_N2 &kp KP_N4 &kp KP_N1>
                     , <&macro_release &kp LALT>;
        )
        ZMK_MACRO(txt_name,
            wait-ms = <50>;
            tap-ms = <50>;
            bindings = <&kp LS(T) &kp H &kp A &kp D &kp D &kp E &kp U &kp S>;
        )
        ZMK_MACRO(txt_lstnm,
            wait-ms = <50>;
            tap-ms = <50>;
            bindings = <&kp LS(K) &kp I &kp E &kp D &kp A &kp I &kp S &kp C &kp H>;
        )
        ZMK_MACRO(txt_adrs,
            wait-ms = <50>;
            tap-ms = <50>;
            bindings = <&kp N1 &kp N1 &kp N2 &kp N7 &kp SPACE &kp LS(A) &kp N &kp D &kp R &kp E &kp W &kp S &kp SPACE &kp LS(P) &kp E &kp A &kp K &kp SPACE &kp LS(D) &kp R>;
        )
        ZMK_MACRO(txt_eml,
            wait-ms = <50>;
            tap-ms = <50>;
            bindings = <&kp W &kp I &kp N &kp D &kp E &kp D &kp AT &kp K &kp I &kp E &kp D &kp A &kp I &kp S &kp C &kp H &kp DOT &kp U &kp S>;
        )
        ZMK_MACRO(dbl_brc,
            wait-ms = <50>;
            tap-ms = <50>;
            bindings = <&kp LBRC &kp RBRC &kp LEFT>;
        )
        ZMK_MACRO(dbl_bkt,
            wait-ms = <50>;
            tap-ms = <50>;
            bindings = <&kp LBKT &kp RBKT &kp LEFT>;
        )
       ZMK_MACRO(dbl_par,
            wait-ms = <50>;
            tap-ms = <50>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT>;
        )
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_tog";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&tog>;
        };
        td_paste: tap_dance_paste {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_PASTE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp LC(V)>,
                <&xl_paste>;
        };
        td_caps: td_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_CAPS";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&sk LSHFT>,
                <&caps_word>;
        };
        td_dot: tap_dance_dot_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_DOT_TAP";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&mt GT DOT>,
                <&new_sent>;
        };
        td_vol_mute: tap_dance_vol_mute {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_VOL_MUTE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp C_VOL_DN>,
                <&kp C_MUTE>;
        };
        td_med_fwd: tap_dance_med_fwd {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_MED_FWD";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&mt RCTRL C_PP>,
                <&kp C_NEXT>;
        };
        td_home: tap_dance_home {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_HOME";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp HOME>,
                <&kp LC(HOME)>;
        };
        td_end: tap_dance_end {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_END";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp END>,
                <&kp LC(END)>;
        };
        td_prt_scn: tap_dance_prt_scn {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_PRT_SCN";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp PSCRN>,
                <&kp LA(PSCRN)>;
        };
        td_brc: tap_dance_brace {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_BRACE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp LBRC>,
                <&dbl_brc>;
        };
        td_bkt: tap_dance_bkt {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_BKT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp LBKT>,
                <&dbl_bkt>;
        };
        td_par: tap_dance_par {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_PAR";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp LPAR>,
                <&dbl_par>;
        };
    };

    combos {
        compatible = "zmk,combos";

        cmb_deg {
            timeout-ms = <50>;
            bindings = <&sym_deg>;
            key-positions = <1 2>;
            layers = <0>;
        };

        cmb_pm {
            timeout-ms = <50>;
            bindings = <&sym_pm>;
            key-positions = <10 22>;
            layers = <1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT {
            bindings = <
  &kp TAB    &kp SQT   &kp COMMA      &td_dot        &kp P        &kp Y      &kp F      &kp G        &kp C           &kp R         &kp L         &mt LC(BSPC) BSPC
  &kp ESC      &hm LGUI A  &hm LALT O  &hm LSHFT E        &hm LCTRL U  &kp I      &kp D      &hm RCTRL H  &hm RSHFT T     &hm LALT N    &hm RGUI S    &kp FSLH
&mt LSHFT DEL  &kp SEMI  &kp Q             &kp J        &kp K        &kp X      &kp B      &kp M        &kp W           &kp V         &kp Z         &mt RSHFT ENTER
  &trans  &trans    &trans     &trans        &mo_tog 1 1  &kp LSHFT  &kp SPACE  &mo_tog 2 2  &mt LALT C_PREV &td_vol_mute  &kp C_VOL_UP  &td_med_fwd
            >;
        };

        NUM_MODS {
            bindings = <
    &reset  &kp F1        &kp F2        &kp F3        &kp F4  &td_brc  &kp RBRC        &kp N7        &kp N8        &kp N9      &kp PLUS    &trans
    &trans  &kp F5        &kp F6  &hm LSHFT F7  &hm LCTRL F8  &td_bkt  &kp RBKT  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6     &kp MINUS    &trans
&caps_word  &kp F9  &hm LALT F10       &kp F11       &kp F12  &td_par  &kp RPAR  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3     &kp EQUAL    &trans
    &trans  &trans        &trans        &trans        &trans   &trans    &trans        &trans  &kp NUMBER_0       &kp DOT  &trans  &trans
            >;
        };

        SHRTCUT {
            bindings = <
&kp GRAVE  &kp KP_NUMBER_1  &kp KP_NUMBER_2    &kp KP_NUMBER_3       &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_NUMBER_0    &trans
   &trans      &kp LC(Z)        &kp LC(X)          &kp LC(C)             &td_paste           &trans        &kp PG_UP         &td_home           &kp UP          &td_end        &kp MINUS  &kp BSLH
 &kp CAPS  &kp C_AC_SEARCH     &kp C_AL_WWW  &mt LALT C_AL_WWW  &kp C_AL_MY_COMPUTER           &trans        &kp PG_DN         &kp LEFT         &kp DOWN        &kp RIGHT        &kp EQUAL    &trans
   &trans           &trans           &trans             &trans                &trans           &trans           &trans           &trans           &trans           &trans           &trans    &trans
            >;
        };

        BT_CTRL {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3     &bt BT_SEL 4           &trans  &trans      &trans    &win_rst  &kp RG(L)  &win_sd
    &trans        &trans      &trans      &trans      &trans           &trans           &trans  &trans      &trans      &trans     &trans   &trans
    &trans        &trans        &trans        &trans        &trans           &trans           &trans  &trans      &trans      &trans     &trans   &trans
    &trans        &trans        &trans        &trans        &trans  &kp LA(LC(DEL))  &kp LA(LC(DEL))  &trans  &bt BT_PRV  &bt BT_NXT     &trans   &trans
            >;
        };
    };
};
